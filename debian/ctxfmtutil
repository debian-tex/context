#!/bin/bash
#
# ctxfmtutil
#
# This script reads the context format definition file from
#	/etc/texmf/context/config/formats.cnf
# and creates the necessary formats by calling texexec.
#

configfile=/etc/texmf/context/config/formats.cnf

texmfsysvar=$(kpsewhich -expand-var '$TEXMFSYSVAR')
texmfvar=$(kpsewhich -expand-var '$TEXMFVAR')

if [ "$(id -u)" -eq 0 ] ; then
  TEXFORMATS=$texmfsysvar/web2c
else
  TEXFORMATS=$texmfvar/web2c
fi
export TEXFORMATS

case "$1" in 
  "--build")
  	build=1 ;;
  "--remove")
  	build=0 ;;
  *)
  	echo "Wrong commandline argument $1!" >&2 ; exit 1 ;;
esac


dhit_build_format ()
{
    tempfile=$(mktemp -p /tmp ctxfmtutil.XXXXXXXX)
    printf "Building ConTeXt format(s) $2 with engine $1.\n\tThis may take some time... "
    if texexec --fast --make --$1 $2 > $tempfile 2>&1 ; then
        rm -f $tempfile
        echo "done."
    else
        echo
        echo "texexec failed. Output has been stored in"
        echo "$tempfile"
        echo "Please include this file if you report a bug."
        echo
        exit 1
    fi
}


remove_format_files()
{
  engine=$1
  format=$2
  if [ "$engine" = pdftex ] ; then engine=pdfetex ; fi
  rm -f $TEXFORMATS/$engine/$format.*
}

check_program()
{
  $1 --version  >/dev/null 2>&1
}

parse_line()
{
  engine=$1
  format=$2
  eval set $engine
  allengines="$@"
  eval set $format
  allformats="$@"
  for e in $allengines ; do
    case "$e" in
      pdftex) prog=pdfetex ;;
      aleph) prog=aleph ;;
      xetex) prog=xetex ;;
      *) echo "Unknown engine $e, exit!" >&2 ; exit 1 ;;
    esac
    if check_program $prog ; then
      # ok, we can build the format, do nothing here
      :
    else
      echo "Warning: engine $prog not present, but specified in the config file!" >&2
      echo "Warning: Will not build the formats based on this engine!" >&2
      continue
    fi
    for f in $allformats ; do
      case "$f" in
        ??) f=cont-$f ;;
      esac
      if [ $build = 1 ] ; then
        dhit_build_format $e $f
      else
        remove_format_files $e $f
      fi
    done
  done
}

OIFS=$IFS
IFS='
'
set $(echo x; sed '/^#/d; /^[  ]*$/d' "$configfile") ; shift
IFS=$OIFS
for line 
do
  parse_line $line;
done

